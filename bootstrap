#!/bin/bash
DEBIAN_RELEASE="squeeze"
BACKPORTS_REPO="http://backports.debian.org/debian-backports"
PUPPET_REPO="http://apt.puppetlabs.com/debian"
OTHER_DEPENDS="
  mongrel nginx-light pwgen xemacs21
  mysql-server libactiverecord-ruby1.8 libmysql-ruby1.8
"
PUPPET_PACKAGES="
  puppet
  puppet-common
  puppetmaster
  puppetmaster-common
  puppet-el
"
APT_OPTIONS='-q -y'

function add_backports_repository()
{
# Add backports for nginx and other packages if needed
    grep -q ${BACKPORTS_REPO} /etc/apt/sources.list || \
	echo "deb ${BACKPORTS_REPO} ${DEBIAN_RELEASE}-backports main" \
	>> /etc/apt/sources.list
    apt-get -q update > /dev/null
}

function add_puppet_repository()
{
# Add puppet repository for later puppet releases
    grep -q ${PUPPET_REPO} /etc/apt/sources.list || \
	echo "deb ${PUPPET_REPO} ${DEBIAN_RELEASE} main" \
	>> /etc/apt/sources.list
    wget -O puppet_repo.gpg ${PUPPET_REPO}/pubkey.gpg
    apt-key add puppet_repo.gpg
    apt-get -q update > /dev/null
}

function install_dependencies()
{
# Install required packages interactively, so mysql-server can
# prompt for a root password
    apt-get ${APT_OPTIONS} install ${PUPPET_DEPENDS} ${PUPPET_RECOMMENDS} \
	${OTHER_DEPENDS}
}

function configure_nginx()
{
# Make an nginx site for puppetmaster
    cp nginx-site /etc/nginx/sites-available/puppetmaster
    ln -s /etc/nginx/sites-available/puppetmaster /etc/nginx/sites-enabled/
    perl -pi.bak -E "s/__FQDN__/${FQDN}/g" /etc/nginx/sites-available/puppetmaster
}

function install_puppet()
{
# Install puppet packages
#    dpkg -i ${PUPPET_PACKAGES}
    apt-get ${APT_OPTIONS} --install-recommends install ${PUPPET_PACKAGES}
    /etc/init.d/puppetmaster stop
}

function configure_mysql()
{
# Configure mysql for storeconfigs
    PUPPET_MYSQL_PASSWORD=`pwgen -s 8 1`
    echo Enter mysql root password below to create puppet database:
    mysqladmin -v -u root -p create puppet
    echo
    echo Enter mysql root password below to grant privileges to puppet user:
    echo grant all privileges on puppet.\* to puppet@localhost identified \
	by \'${PUPPET_MYSQL_PASSWORD}\'\; | mysql -v -u root -p
}

function configure_puppetmaster()
{
# Create puppet.conf, including storeconfigs support
    cp puppet.conf /etc/puppet/puppet.conf
    perl -pi.bak \
	-e "s/__PASSWORD__/${PUPPET_MYSQL_PASSWORD}/g;s/__FQDN__/${FQDN}/g" \
	/etc/puppet/puppet.conf
    mkdir /etc/puppet/plugins
# Create /etc/default/puppetmaster
    cp puppetmaster.default /etc/default/puppetmaster
}

function restart_nginx_puppetmaster()
{
# Restarting nginx and puppetmaster
    /etc/init.d/nginx stop
    /etc/init.d/puppetmaster stop
    /etc/init.d/nginx start
    /etc/init.d/puppetmaster start
}

function create_minimal_manifest()
{
# Finishing up minimal puppet manifests
    mkdir -p /etc/puppet/environments/dev/manifests
    if [ ! -f /etc/puppet/environments/dev/manifests/site-dev.pp ]; then
	echo 'node default {}' > /etc/puppet/environments/dev/manifests/site-dev.pp
    fi
}

function test_puppet_client()
{
    puppetd -vt
}

BASEDIR=`dirname $0`
FQDN=`hostname --fqdn`

cd ${BASEDIR}
FUNCTION_LIST="
	add_backports_repository add_puppet_repository
	configure_nginx
	install_puppet configure_mysql configure_puppetmaster
	restart_nginx_puppetmaster create_minimal_manifest test_puppet_client
	"
for name in ${FUNCTION_LIST}; do
  echo === Running ${name}\(\) ===
  ${name}
  echo
done
